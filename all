#!/bin/ksh
#
#---------------------------------------------------------------------------
# Application Refonte LUCA - BATCH
#---------------------------------------------------------------------------
#
# SOPRA
#
# Function : Installe la partie dba d'une livraison
#
# Gestion Configuration CVS :
#
# Nom du shell............: $RCSfile install_dba_scripts.ksh,v $
# Date de modification....: $Date: 2013/10/31 $
# Auteur.................: $Author: wda $
# Revision...............: $Revision: 1.0 $
# Classement.............: $Source: $
#
# Parametres d'entree : $1 => SERVICE_NAME
#                       $2 => USER
#                       $3 => PASSWORD
#                       $4 => IP_SERVER
#                       $5 => PACKAGE
#
# Codes Retour :
#               0 => OK
#               1 => Sortie en erreur le dossier des scripts existe deja
#               2 => Sortie en erreur lors de la decompression de cats-script
#               3 => Sortie en erreur le dossier cats-scripts n'a pas ete trouve dans le tar
#               4 => Sortie en erreur un script n'a pas de script de rollback
#               5 => Sortie en erreur l'insertion d'une ligne dans SCRIPT_HISTORY a echoue
#               6 => Sortie en erreur l'execution du script a echoue
#               7 => Sortie en erreur la mise a jour d'une ligne dans SCRIPT_HISTORY a echoue
#               8 => Sortie en erreur la construction des packages a echoue
#               9 => Sortie en erreur le nombre de parametres est incorrect
#
#---------------------------------------------------------------------------
# WDA 28/10/2013 Creation du script shell
# JFE 12/11/2013 Ajout parametres pour lancer le shell et redirection des messages dans les logs
# CCM 19/12/2013 Appel de sqlplus avec ORACLE_SID a chaque fois
# JFE 30/12/2013 Gestion du rollback directement avec sqlplus
# Modification pour support service name et IP

# Fichier de log
rep_depart=$(pwd)
fic_shell_sans_ext=$(basename $0 ".ksh")
LOG_FILE=$rep_depart/${fic_shell_sans_ext}.log
exec 1>> $LOG_FILE
exec 2>> $LOG_FILE

echo `date +%y/%m/%d` `date +%H:%M:%S` "Debut Shell $0 $1 $2 $3 $4 $5" >> $LOG_FILE

# Verification du nombre de parametres
if [[ $# != 5 ]]
then
    echo `date +%y/%m/%d` `date +%H:%M:%S` "Usage: install_dba_scripts.ksh <SERVICE_NAME> <USER> <PASSWORD> <IP_SERVER> <PACKAGE>" >> $LOG_FILE
    echo `date +%y/%m/%d` `date +%H:%M:%S` "Sortie en erreur. Code retour: <9>\n" >> $LOG_FILE
    exit 9
fi

# Parametrage BDD
SERVICE_NAME=$1
USER=$2
PASS=$3
IP_SERVER=$4
PACKAGE=$5

# Construction de la chaine de connexion avec service name
# Format: user/password@//host:port/service_name
ORACLE_CONNECT_STRING="$USER/$PASS@//$IP_SERVER:1521/$SERVICE_NAME"

# Parametrage cats-script
rep_script=cats-script

# Parametrage cats-plsql
tar_plsql=cats-plsql.tar
buildAll=buildAll.sql

#---------------------------------------------
#--------------- CATS-SCRIPT -----------------
#---------------------------------------------

# Verification de la non existance du dossier a extraire
if [[ -d $rep_script ]]
then
    echo `date +%y/%m/%d` `date +%H:%M:%S` "Erreur le dossier a extraire \"$rep_script\" existe deja, veuillez le supprimer et relancer le script" >> $LOG_FILE
    echo `date +%y/%m/%d` `date +%H:%M:%S` "Sortie en erreur. Code retour: <1>\n" >> $LOG_FILE
    exit 1
fi

# Decompression de l'archive contenant les scripts
tar xvf $rep_script.tar
if [[ $? -ne 0 ]]
then
    echo `date +%y/%m/%d` `date +%H:%M:%S` "Erreur lors de la decompression" >> $LOG_FILE
    echo `date +%y/%m/%d` `date +%H:%M:%S` "Sortie en erreur. Code retour: <2>\n" >> $LOG_FILE
    exit 2
fi

cd $rep_script
if [[ $? -ne 0 ]]
then
    echo "Erreur le dossier $rep_script n'a pas ete compresse dans le tar $rep_script.tar"
    echo `date +%y/%m/%d` `date +%H:%M:%S` "Sortie en erreur. Code retour: <3>\n" >> $LOG_FILE
    exit 3
fi

# Recuperation de la liste des scripts triee par ordre alphabetique
liste_scripts=$(ls -1 | sort)

# Pour chaque script extrait
for script in $liste_scripts
do
    if [[ -d $script ]]; then
        continue
    fi

    # on applique la convention de nommage des fichiers rollback
    script_rollback=${script%'.sql'}_ROLLBACK.sql

    if [[ ! -f "rollback/$script_rollback" ]]
    then
        echo `date +%y/%m/%d` `date +%H:%M:%S` "le script $script n'a pas de script de rollback associe. attendu : rollback/$script_rollback" >> $LOG_FILE
        echo `date +%y/%m/%d` `date +%H:%M:%S` "Sortie en erreur. Code retour: <4>\n" >> $LOG_FILE
        exit 4
    fi

    # Recuperation de la version de la livraison
    version=$(echo $script | cut -d'_' -f1)
    if [[ $? -ne 0 ]]
    then
        version='0'
    fi

    # Recuperation de l'id du fichier
    id=$(echo $script | cut -d'_' -f2)
    if [[ $? -ne 0 ]]
    then
        id='1'
    fi

    # Recherche d'un enregistrement du script sur la base
    statut=$(sqlplus -S $ORACLE_CONNECT_STRING <<! 
        set PAGESIZE    0
        set echo on
        SELECT (SELECT STATUT FROM SCRIPT_HISTORY WHERE NOM_SCRIPT='$script') FROM DUAL;
!
)

    if [[ -z $statut ]]
    then
        statut=0
        # si le script n'a pas ete renseigne dans la base
        # Insertion d'une ligne dans SCRIPT_HISTORY
        sqlplus -S $ORACLE_CONNECT_STRING <<!
            WHENEVER SQLERROR EXIT FAILURE ROLLBACK;
            set echo on
            INSERT INTO SCRIPT_HISTORY (VERSION,ID,NOM_SCRIPT,STATUT,DATE_LIVRAISON, CATS_PACKAGE) VALUES ('$version','$id','$script',$statut,sysdate, '$PACKAGE');
            COMMIT;
!

        if [[ $? -ne 0 ]]
        then
            echo `date +%y/%m/%d` `date +%H:%M:%S` "Erreur lors de l'insertion dans SCRIPT_HISTORY" >> $LOG_FILE
            echo `date +%y/%m/%d` `date +%H:%M:%S` "Sortie en erreur. Code retour: <5>\n" >> $LOG_FILE
            exit 5
        fi
    fi

    if [[ $statut -eq 1 ]]
    then
        echo `date +%y/%m/%d` `date +%H:%M:%S` "Script $script deja execute" >> $LOG_FILE
    fi

    if [[ $statut -eq 0 ]]
    then
        # si le script n'a pas ete execute
        # Execution du script
        sqlplus -S $ORACLE_CONNECT_STRING <<!
            WHENEVER SQLERROR EXIT FAILURE ROLLBACK;
            set echo on
            set SQLBLANKLINES ON
            @$script;
!

        if [[ $? -ne 0 ]]
        then
            echo `date +%y/%m/%d` `date +%H:%M:%S` "Erreur lors de l'execution du script $script" >> $LOG_FILE
            echo `date +%y/%m/%d` `date +%H:%M:%S` "Sortie en erreur. Code retour: <6>\n" >> $LOG_FILE
            exit 6
        fi

        # Mise a jour de la ligne correspondant au script
        sqlplus -S $ORACLE_CONNECT_STRING <<!
            WHENEVER SQLERROR EXIT FAILURE ROLLBACK;
            set echo on
            UPDATE SCRIPT_HISTORY SET STATUT=1, DATE_LIVRAISON=SYSDATE WHERE NOM_SCRIPT='$script';
            COMMIT;
!

        if [[ $? -ne 0 ]]
        then
            echo `date +%y/%m/%d` `date +%H:%M:%S` "Erreur lors de la mise a jour dans SCRIPT_HISTORY" >> $LOG_FILE
            echo `date +%y/%m/%d` `date +%H:%M:%S` "Sortie en erreur. Code retour: <7>\n" >> $LOG_FILE
            exit 7
        fi

        echo `date +%y/%m/%d` `date +%H:%M:%S` "Script $script execute" >> $LOG_FILE
    fi
done

statut=''

# Suppression des fichiers extraits
cd $rep_depart
rm -r $rep_script

#---------------------------------------------
#-------------- CATS-PL/SQL -----------------
#---------------------------------------------

rep_temp=temp_plsql

# Creation du dossier temporaire
mkdir $rep_temp

# Copie du tar vers le dossier temporaire
cp $tar_plsql $rep_temp

cd $rep_temp

# Decompression de l'archive contenant les packages
tar xvf $tar_plsql

# Execution du buildAll
sqlplus -S $ORACLE_CONNECT_STRING <<!
    WHENEVER SQLERROR EXIT FAILURE;
    set echo on
    @$buildAll
!

if [[ $? -ne 0 ]]
then
    echo `date +%y/%m/%d` `date +%H:%M:%S` "Erreur lors de l'execution de $buildAll" >> $LOG_FILE
    echo `date +%y/%m/%d` `date +%H:%M:%S` "Sortie en erreur. Code retour: <8>\n" >> $LOG_FILE
    exit 8
fi

# Suppression des fichiers extraits
cd $rep_depart
rm -r $rep_temp

echo `date +%y/%m/%d` `date +%H:%M:%S` "Installation des scripts dba et des packages terminee" >> $LOG_FILE
echo `date +%y/%m/%d` `date +%H:%M:%S` "Fin Shell $0 \n\n" >> $LOG_FILE

exit 0
