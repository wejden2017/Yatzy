# ============================================
# GitLab CI/CD Pipeline
# Oracle User Management - CATS DB Admin
# ============================================

default:
  image: registry.dxl.lseg.com/app/app-00451/cats-devops/ci-pipelines/cats-ansible2-python36:1.0.0

# ==================== INCLUDES ====================
include:
  - project: ci/stable/security/vault-service
    ref: 4.0.4
    file:
      - templates/vault-service.yml
  - local: 'ci/common.yml'
  
  inputs:
    environment: $[[ inputs.environment ]]

# ==================== PIPELINE STAGES ====================
stages:
  - 🔐 prepare_auth
  - ✅ validate
  - 🚀 apply

# ==================== GLOBAL VARIABLES ====================
variables:
  AWS_REGION: "eu-west-2"
  ANSIBLE_HOST_KEY_CHECKING: "false"
  ANSIBLE_VAULT_PASSWORD_FILE: $CI_PROJECT_DIR/.vault_pass.txt
  VS_VAULT_SELECT: "ppe"
  VS_VAULT_NAMESPACE: "aws"
  VAULT_PASSWORD: "tqMj8keXYQkJbHCRgD"
  IS_BASE64:
    value: "true"
    options: [ "true", "false" ]
    description: "Does 'SSH_PRIVATE_KEY' is saved in base64 in the Vault service kv ?"

# ==================== INPUTS ====================
spec:
  inputs:
    environment:
      type: string
      description: choisissez l'environnement
      options: [ 'dev', 'qa', 'uat' ]
      default: 'dev'

# ==================== ENVIRONMENT-SPECIFIC VARIABLES ====================
.env-dev:
  environment:
    name: dev
  variables:
    ENV: "dev"
    AWS_ACCOUNT: "907680592951"
    TAGS: "newdev"

.env-qa:
  environment:
    name: qa
  variables:
    ENV: "qa"
    AWS_ACCOUNT: "627305679538"
    TAGS: "cats, eu-west-2, qa, x86_64_docker_autoscaling"

.env-uat:
  environment:
    name: uat
  variables:
    ENV: "uat"
    AWS_ACCOUNT: "025092612531"
    TAGS: "uat"

# ==================== AUTHENTICATION ====================
"aws_auth":
  stage: 🔐 prepare_auth
  extends: [ .vault-aws-auth-artifacts, ".env-$[[ inputs.environment ]]" ]
  variables:
    VS_AWS_ACCOUNT: $AWS_ACCOUNT

"secret_from_vault":
  stage: 🔐 prepare_auth
  variables:
    PLAYBOOKS: "manage_db_users.yml"
    ACTIONS: "retrieve_secrets"
  extends: [ .vault-artifact-decrypter, ".env-$[[ inputs.environment ]]" ]
  needs: [ aws_auth ]
  before_script:
    - !reference [ .vault-artifact-decrypter, before_script ]
  script:
    - echo "🔑 Retrieving secrets from Vault for ${ENV}..."
    
    # EC2 Key Pair
    - export VAULT_SECRET_PATH="gitlab/app-00451/kv/aws-cats-${ENV}"
    - export VAULT_SECRET_KEY="EC2_KEY_PAIR"
    - vault-service
    - echo "✓ EC2_KEY_PAIR retrieved"
    
    # SYSDBA Password
    - export VAULT_SECRET_KEY="SYSDBA_PASSWORD"
    - vault-service
    - echo "✓ SYSDBA_PASSWORD retrieved"
  environment:
    name: $ENV
  tags:
    - $TAGS

# ==================== VALIDATION ====================
"validate_users":
  stage: ✅ validate
  variables:
    PLAYBOOKS: "manage_db_users.yml"
    ACTIONS: "--check --diff"
    ANSIBLE_PARAM: ""
  extends: [ .ansible_cats_script_common, ".env-$[[ inputs.environment ]]" ]
  needs: [ aws_auth, secret_from_vault ]
  before_script:
    - !reference [ .before_script_common, before_script ]
    - !reference [ .validate_ansible_param, before_script ]
  environment:
    name: $ENV
  tags:
    - $TAGS
  only:
    changes:
      - env/users_env_*.yml
      - inventory/**/*
      - roles/**/*
      - manage_db_users.yml
      - .gitlab-ci.yml

# ==================== APPLY ====================
"apply_users":
  stage: 🚀 apply
  variables:
    PLAYBOOKS: "manage_db_users.yml"
    ACTIONS: "-v"
    ANSIBLE_PARAM: ""
  extends: [ .ansible_cats_script_common, ".env-$[[ inputs.environment ]]" ]
  needs: [ aws_auth, secret_from_vault ]
  before_script:
    - !reference [ .before_script_common, before_script ]
    - !reference [ .validate_ansible_param, before_script ]
  environment:
    name: $ENV
    action: start
  tags:
    - $TAGS
  when: manual
```

---

## 📂 **Structure finale de votre projet**
```
cats-db-user-admin/
├── .gitlab-ci.yml                    # ← NOUVEAU (ci-dessus)
├── ci/
│   └── common.yml                    # ← GARDEZ TEL QUEL (déjà existant)
├── inventory/
│   ├── aws_ec2_inventory.py
│   └── common.yml
├── env/
│   ├── users_env_dev.yml
│   ├── users_env_qa.yml
│   └── users_env_uat.yml
├── roles/
│   └── oracle_user_admin/
│       ├── tasks/
│       │   └── main.yml
│       └── templates/
│           ├── user_present.sql.j2
│           └── drop_user.sql.j2
├── manage_db_users.yml
├── ansible.cfg
└── README.md
