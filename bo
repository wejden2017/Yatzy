resource "aws_lb" "nlb_cats" {
  name               = "${var.entity}-${var.application}-${var.environment}-cats-nlb"
  internal           = true
  load_balancer_type = "network"
  subnets            = var.subnet_ids
  enable_cross_zone_load_balancing = true
  tags               = var.tags
}

# === Target group catsweb (port 8080, HTTP) ===
resource "aws_lb_target_group" "tg_cats_web" {
  name        = "${var.entity}-${var.application}-${var.environment}-cats-web-tg"
  port        = 8080
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "instance"
  tags        = var.tags

  health_check {
    path                = "/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 3
    unhealthy_threshold = 3
    matcher             = "200"
  }
}

# === Target group catsbackend (port 8081, HTTP) ===
resource "aws_lb_target_group" "tg_cats_backend" {
  name        = "${var.entity}-${var.application}-${var.environment}-cats-backend-tg"
  port        = 8081
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "instance"
  tags        = var.tags

  health_check {
    path                = "/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 3
    unhealthy_threshold = 3
    matcher             = "200"
  }
}

# === Attach EC2 instance to target groups ===
resource "aws_lb_target_group_attachment" "tg_attach_web" {
  target_group_arn = aws_lb_target_group.tg_cats_web.arn
  target_id        = var.instance_id
  port             = 8080
}

resource "aws_lb_target_group_attachment" "tg_attach_backend" {
  target_group_arn = aws_lb_target_group.tg_cats_backend.arn
  target_id        = var.instance_id
  port             = 8081
}

# === Listener HTTP (port 80) ===
resource "aws_lb_listener" "http_router" {
  load_balancer_arn = aws_lb.nlb_cats.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type = "fixed-response"
    fixed_response {
      content_type = "text/plain"
      message_body = "Not Found"
      status_code  = "404"
    }
  }
}

# === Listener rules ===
resource "aws_lb_listener_rule" "catsweb_rule" {
  listener_arn = aws_lb_listener.http_router.arn
  priority     = 100

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg_cats_web.arn
  }

  condition {
    path_pattern {
      values = ["/catsweb/*"]
    }
  }
}

resource "aws_lb_listener_rule" "catsbackend_rule" {
  listener_arn = aws_lb_listener.http_router.arn
  priority     = 200

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg_cats_backend.arn
  }

  condition {
    path_pattern {
      values = ["/catsbackend/*"]
    }
  }
}

# === Outputs ===
output "nlb_dns_name" {
  value = aws_lb.nlb_cats.dns_name
}

output "tg_web_arn" {
  value = aws_lb_target_group.tg_cats_web.arn
}

output "tg_backend_arn" {
  value = aws_lb_target_group.tg_cats_backend.arn
}
