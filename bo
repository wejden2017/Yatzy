7-create-fsx-share:
  stage: Create SMB Share
  image: amazonlinux:2
  tags: [app-00451-dev-ec2-gitlab-runner]
  extends: [.vault-artifact-decrypter]
  dependencies:
    - 1-vault-kv-retriever
    - 1-vault-aws-auth
    - 4-terraform-apply
    - 6-join-ad
  script:
    - yum install -y jq awscli

    # Récupération IP FSx + Instance ID
    - export FSX_MANAGEMENT_IP=$(jq -r '.fsx_management_ip.value' terraform_outputs.json)
    - export INSTANCE_ID=$(jq -r '.fsx_instance_id.value' terraform_outputs.json)
    - echo "📡 FSx IP: $FSX_MANAGEMENT_IP"
    - echo "🔧 FSx Instance ID: $INSTANCE_ID"

    # Génère le script localement
    - |
      cat << 'EOF' > create_share.sh
      #!/bin/bash
      set -e

      vserver="cats-vsm"
      sharename="FSHQ"
      sharename_path="/FSHQ"
      group="Domain Users"

      echo "🔍 Checking if share $sharename exists..."
      if ! vserver cifs share show -vserver $vserver -share-name $sharename | grep $sharename; then
        echo "📁 Creating share $sharename..."
        vserver cifs share create -vserver $vserver -share-name $sharename -path $sharename_path
      else
        echo "✅ Share $sharename already exists."
      fi

      echo "🔍 Checking access control for $group..."
      if ! vserver cifs share access-control show -vserver $vserver -share $sharename | grep "$group"; then
        echo "🔐 Setting access control for $group..."
        vserver cifs share access-control create -vserver $vserver -share $sharename -user-or-group "$group" -permission full_control
      else
        echo "✅ Access control for $group already exists."
      fi
      EOF

    # Envoie et exécute via SSM
    - |
      aws ssm send-command \
        --document-name "AWS-RunShellScript" \
        --region eu-west-3 \
        --instance-ids "$INSTANCE_ID" \
        --comment "Create FSx SMB Share" \
        --parameters 'commands=["bash -c '\''cat > /tmp/create_share.sh <<EOF\n'"$(cat create_share.sh | sed 's/"/\\"/g')"'\nEOF\nbash /tmp/create_share.sh'\''"]' \
        --output text
