resource "aws_lb" "nlb_cats" {
  name               = "${var.entity}-${var.application}-${var.environment}-cats-nlb"
  internal           = true
  load_balancer_type = "network"
  subnets            = var.subnet_ids
  enable_cross_zone_load_balancing = true
  tags               = var.tags
}

# Target groups pour EC2-front
resource "aws_lb_target_group" "tg_cats_web" {
  name        = "${var.entity}-${var.application}-${var.environment}-cats-web-tg"
  port        = 8080
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "instance"
  tags        = var.tags

  health_check {
    path                = "/"
    port                = "8080"
    protocol            = "HTTP"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 3
    unhealthy_threshold = 3
    matcher             = "200"
  }
}

resource "aws_lb_target_group" "tg_cats_backend" {
  name        = "${var.entity}-${var.application}-${var.environment}-cats-backend-tg"
  port        = 8081
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "instance"
  tags        = var.tags

  health_check {
    path                = "/"
    port                = "8081"
    protocol            = "HTTP"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 3
    unhealthy_threshold = 3
    matcher             = "200"
  }
}

# Attach EC2-front
resource "aws_lb_target_group_attachment" "tg_attach_web" {
  target_group_arn = aws_lb_target_group.tg_cats_web.arn
  target_id        = var.front_instance_id
  port             = 8080
}

resource "aws_lb_target_group_attachment" "tg_attach_backend" {
  target_group_arn = aws_lb_target_group.tg_cats_backend.arn
  target_id        = var.front_instance_id
  port             = 8081
}

# Target groups dynamiques pour /app1 â†’ /app6 (EC2-services)
locals {
  swagger_apps = {
    app1 = 9001
    app2 = 9002
    app3 = 9003
    app4 = 9004
    app5 = 9005
    app6 = 9006
  }
}

resource "aws_lb_target_group" "tg_apps" {
  for_each    = local.swagger_apps
  name        = "${var.entity}-${var.application}-${var.environment}-${each.key}-tg"
  port        = each.value
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "instance"
  tags        = var.tags

  health_check {
    path                = "/"
    port                = each.value
    protocol            = "HTTP"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 3
    unhealthy_threshold = 3
    matcher             = "200"
  }
}

resource "aws_lb_target_group_attachment" "tg_attach_apps" {
  for_each         = local.swagger_apps
  target_group_arn = aws_lb_target_group.tg_apps[each.key].arn
  target_id        = var.services_instance_id
  port             = each.value
}

# Listener HTTP unique
resource "aws_lb_listener" "main_http" {
  load_balancer_arn = aws_lb.nlb_cats.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type = "fixed-response"
    fixed_response {
      content_type = "text/plain"
      message_body = "No route matched"
      status_code  = "404"
    }
  }
}

# Listener rules
resource "aws_lb_listener_rule" "catsweb_rule" {
  listener_arn = aws_lb_listener.main_http.arn
  priority     = 10
  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg_cats_web.arn
  }
  condition {
    path_pattern {
      values = ["/catsweb*", "/catsweb/*"]
    }
  }
}

resource "aws_lb_listener_rule" "catsbackend_rule" {
  listener_arn = aws_lb_listener.main_http.arn
  priority     = 20
  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg_cats_backend.arn
  }
  condition {
    path_pattern {
      values = ["/catsbackend*", "/catsbackend/*"]
    }
  }
}

resource "aws_lb_listener_rule" "apps_rules" {
  for_each     = local.swagger_apps
  listener_arn = aws_lb_listener.main_http.arn
  priority     = 30 + index(keys(local.swagger_apps), each.key)
  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg_apps[each.key].arn
  }
  condition {
    path_pattern {
      values = ["/${each.key}*", "/${each.key}/*"]
    }
  }
}
