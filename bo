########################################
# modules/api_gateway_rest/variables.tf
########################################

variable "name_prefix" { type = string }
variable "vpc_link_id" { type = string }
variable "catsweb_tg_arn" { type = string }
variable "catsbackend_tg_arn" { type = string }
variable "common_tags" { type = map(string) }

######################################
# modules/api_gateway_rest/main.tf
######################################

resource "aws_api_gateway_rest_api" "this" {
  name        = "${var.name_prefix}-api"
  description = "API Gateway for CATS Web and Backend"
  tags        = var.common_tags
}

resource "aws_api_gateway_resource" "catsweb" {
  rest_api_id = aws_api_gateway_rest_api.this.id
  parent_id   = aws_api_gateway_rest_api.this.root_resource_id
  path_part   = "catsweb"
}

resource "aws_api_gateway_resource" "catsweb_proxy" {
  rest_api_id = aws_api_gateway_rest_api.this.id
  parent_id   = aws_api_gateway_resource.catsweb.id
  path_part   = "{proxy+}"
}

resource "aws_api_gateway_method" "catsweb_any" {
  rest_api_id   = aws_api_gateway_rest_api.this.id
  resource_id   = aws_api_gateway_resource.catsweb_proxy.id
  http_method   = "ANY"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "catsweb" {
  rest_api_id = aws_api_gateway_rest_api.this.id
  resource_id = aws_api_gateway_resource.catsweb_proxy.id
  http_method = aws_api_gateway_method.catsweb_any.http_method

  integration_http_method = "ANY"
  type                    = "HTTP_PROXY"
  uri                     = "http://${var.catsweb_tg_arn}/{proxy}"
  connection_type         = "VPC_LINK"
  connection_id           = var.vpc_link_id
}

resource "aws_api_gateway_resource" "catsbackend" {
  rest_api_id = aws_api_gateway_rest_api.this.id
  parent_id   = aws_api_gateway_rest_api.this.root_resource_id
  path_part   = "catsbackend"
}

resource "aws_api_gateway_resource" "catsbackend_proxy" {
  rest_api_id = aws_api_gateway_rest_api.this.id
  parent_id   = aws_api_gateway_resource.catsbackend.id
  path_part   = "{proxy+}"
}

resource "aws_api_gateway_method" "catsbackend_any" {
  rest_api_id   = aws_api_gateway_rest_api.this.id
  resource_id   = aws_api_gateway_resource.catsbackend_proxy.id
  http_method   = "ANY"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "catsbackend" {
  rest_api_id = aws_api_gateway_rest_api.this.id
  resource_id = aws_api_gateway_resource.catsbackend_proxy.id
  http_method = aws_api_gateway_method.catsbackend_any.http_method

  integration_http_method = "ANY"
  type                    = "HTTP_PROXY"
  uri                     = "http://${var.catsbackend_tg_arn}/{proxy}"
  connection_type         = "VPC_LINK"
  connection_id           = var.vpc_link_id
}

resource "aws_api_gateway_deployment" "this" {
  depends_on  = [aws_api_gateway_integration.catsweb, aws_api_gateway_integration.catsbackend]
  rest_api_id = aws_api_gateway_rest_api.this.id
  stage_name  = "v1"
}

########################################
# modules/api_gateway_rest/outputs.tf
########################################

output "rest_api_id" {
  value = aws_api_gateway_rest_api.this.id
}

output "rest_api_url" {
  value = "https://${aws_api_gateway_rest_api.this.id}.execute-api.${data.aws_region.current.name}.amazonaws.com/v1"
}

########################################
# usage depuis root module
########################################

module "api_gateway_rest" {
  source             = "./modules/api_gateway_rest"
  name_prefix        = local.name_prefix
  vpc_link_id        = module.vpc_link.id
  catsweb_tg_arn     = module.nlb.tg_arn_web
  catsbackend_tg_arn = module.nlb.tg_arn_backend
  common_tags        = local.standard_tags
}

output "api_url" {
  value = module.api_gateway_rest.rest_api_url
}
s
