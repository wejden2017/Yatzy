#!/bin/ksh

. ${HOME}/env/env.ksh
. ${CATS_OPER}/common_functions.sh

# --- Logs standards ---
LOG_SCRIPT=${CATS_LOG}/`basename $0 ".ksh"`.log
nom_script=`basename $0 "$@"`
exec 1>>"$LOG_SCRIPT" 2>>"$LOG_SCRIPT"

LOGINFO "${nom_script}" "Début" | tee -a "$LOG_GENERAL"
LOGSTART "${nom_script}"

# --- Paramètres ---
CONF_FILE="$1"
OUT_DIR="${2:-${DATA_APF}}"   # défaut: /opt/cats/data/apf

if [ -z "$CONF_FILE" ]; then
  LOGERR "${nom_script}" "Usage: $0 <fichier_conf.cf> [out_dir]"
  CHECK_RETURN_CODE_CATS "${nom_script}" 1 "Paramètres manquants"
fi

[ -f "$CONF_FILE" ] || { LOGERR "${nom_script}" "Conf introuvable: $CONF_FILE"; CHECK_RETURN_CODE "${nom_script}" "1" "Conf manquante"; }
[ -d "$OUT_DIR" ] || { mkdir -p "$OUT_DIR" || { LOGERR "${nom_script}" "Creation OUT_DIR impossible: $OUT_DIR"; CHECK_RETURN_CODE "${nom_script}" "1" "OUT_DIR KO"; }; }

# --- Defaults si non définis dans l’env ---
CAL_CODE=${CAL_CODE:-070}
LANGUE=${LANGUE:-fr}
CNX_CATS=${CNX_CATS:-"sqlplus -s USER/PASS@SRV"}

# --- Helpers ---
rpad() { printf "%-${2}s" "$1"; }    # pad à droite (char)
lpad0() { printf "%0${2}d" "$1"; }   # pad à gauche (num)

now_ts() { date +"%Y%m%d%H%M%S"; }   # 14
sys_dt()  { date +"%Y%m%d"; }        # 8

resolve_date() {
  # $1 = DATE_J | DATE_J1 | AAAAMMJJ
  case "$1" in
    DATE_J)
      sys_dt
      ;;
    DATE_J1)
      res=$(${CNX_CATS} <<SQL
set pages 0 feedback off verify off heading off echo off trimspool on
SELECT to_char(
  PACK_GESTION_CALENDRIER.CAL_DATE_AVEC_SAMDIM(
     upper('${LANGUE}'), SYSDATE, '${CAL_CODE}', 3
  ),
 'YYYYMMDD')
FROM dual;
exit
SQL
)
      dt=$(echo "$res" | tr -d '[:space:]')
      if [ -n "$dt" ]; then
        echo "$dt"
      else
        LOGERR "${nom_script}" "Echec DATE_J1 via Oracle (fallback J+1)"
        if date -d "+1 day" +"%Y%m%d" >/dev/null 2>&1; then
          date -d "+1 day" +"%Y%m%d"
        else
          perl -MPOSIX -e 'print strftime("%Y%m%d",localtime(time+86400))'
        fi
      fi
      ;;
    *)
      echo "$1"
      ;;
  esac
}

# --- Traitement ---
LOGINFO "${nom_script}" "Lecture conf: $CONF_FILE"
LOGINFO "${nom_script}" "Dossier sortie: $OUT_DIR"

grep -v '^[[:space:]]*#' "$CONF_FILE" | grep -v '^[[:space:]]*$' |
while IFS=';' read -r NOM_FICHIER NOM_TABLE DT_TRAIT DT_DER_COMPENS CD_SOC ID_FILE
do
  [ -n "$NOM_FICHIER" ] || continue

  APP=$(rpad "$NOM_TABLE" 5)         # 5 chars (troncé/paddé)
  TS=$(now_ts)                       # 14 chars
  ID2=$(lpad0 "$ID_FILE" 2)          # 2 chars
  NBRE=$(lpad0 2 6)                  # "000002"

  DT_T1=$(resolve_date "$DT_TRAIT")        # 8 chars
  DT_T2=$(resolve_date "$DT_DER_COMPENS")  # 8 chars

  # Format fixe, sans séparateurs ; ID en dernier du HEADER
  HEADER="1${APP}${TS}${DT_T1}${DT_T2}${ID2}"
  FOOTER="9${APP}${TS}${ID2}${NBRE}"

  OUT_PATH="${OUT_DIR}/${NOM_FICHIER}"
  echo "$HEADER" >  "$OUT_PATH" || { LOGERR "${nom_script}" "Ecriture KO: $OUT_PATH (header)"; CHECK_RETURN_CODE "${nom_script}" "1" "Write header KO"; }
  echo "$FOOTER" >> "$OUT_PATH" || { LOGERR "${nom_script}" "Ecriture KO: $OUT_PATH (footer)"; CHECK_RETURN_CODE "${nom_script}" "1" "Write footer KO"; }

  LOGINFO "${nom_script}" "Genere: $OUT_PATH"
done

# --- Fin ---
LOGEND "${nom_script}" "Fin" | tee -a "$LOG_GENERAL"
LOGINFO "${nom_script}" "Fin" | tee -a "$LOG_GENERAL"
exit 0
